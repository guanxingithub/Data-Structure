#include <stdio.h>
#include <stdlib.h>

struct Node
{
  int data;
  struct Node *next;
};
struct Node *fist = NULL;

void create(int A[], int n)
{
  struct Node *t, *last;
  
  // first create the first node for first;
  first = (struct Node *)malloc(sizeof(struct Node));
  first->data = A[0];
  first->next = NULL;
  last = first;
  
  for (int i = 1; i < n; i++) {
    t = (struct Node *) malloc(sizeof(struct Node));
    t->data = A[i];
    t->next = NULL;
    last->next = t;
    last = t;
  }
}
void display(struct Node *P)
{
  while (P) {
    printf("%d ", P->data);
    P= P->next;
 }
}
void Rdisplay(struct Node *P)
{
  while (P != NULL) 
  {
    printf("%d ", P->data);
    Rdisplay(P->next);
  }
}

int count(struct Node *P)
{
  int c = 0;
  while (P) 
  {
    c++;
    P = P->next;
  }
  return c;
}
int Rcount(struct Node *P)
{
  if (!P) return 0;
  return 1 + Rcount(P->next);
}

int sum(struct Node *P)
{
  int sum = 0;
  while (P)
  {
    sum += P->data;
    P = P->next;
  }
  return sum;
}

int Rsum(struct Node *P)
{
  if (P == NULL) return 0;
  return P->data + Rsum(P->next);
}

int max(struct Node *p)
{
  if (!p) return 0;
  int max = p->data;
  p = p->next;
  while(p)
  {
    if (p->data > max ) max = p->data;
    p = p->next;
  }
  return p;
}

int max(struct Node *p)
{
  if (!p) return 0;
  if (p && p->next == NULL) return p->data;
  int max = p->data;
  int new = max(p->next);
  if ( max < new ) max = new;
  return new;
}

int main() 
{
  int A[] = {1, 2, 3, 4, 5};
  create(A, 5);
  display(first);
  return 0;
}
