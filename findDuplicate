#include<iostream>

vector<int> findDuplicate(vector<int> list)
{
  int n = list.size();
  if ( n < 2) return vector<int>();
  vector<int> result;
  
  int min = list[0];
  for (int i = 0; i < list.size(); i++) {
    if (list[i] < min) min = list[i];
  }
  int lastDuplicate = min -1;
  
  for ( int i = 0; i < n-1; i ++) {
    if ( list[i] == list[i+1] && list[i] != lastDuplicate) {
      lastDuplicate = list[i];
      result.push_back(lastDuplicate);
    }
  }
  return result;
}

vector<pair<int, int>> findDuplicate(vector<int> list)
{
  int n = list.size();
  if ( n < 2) return vector<int>();
  vector<pair<int,int>> result;
  
  int min = list[0];
  for (int i = 0; i < list.size(); i++) {
    if (list[i] < min) min = list[i];
  }
  int lastDuplicate = min -1;
  int j;
  
  for ( int i = 0; i < n-1; i ++) {
    if ( list[i] == list[i+1] ) {
      j = i +1;
      while(list[j]== list[j+1]) j++;
      pair<int,int> a(lastDuplicate, j-i+1);
      // another way
      // pair<int, int> a;
      // a.first = lastDuplicate;
      // a.second = j-i +1;
      lastDuplicate = list[i];
      result.push_back(a);
    }
  }
  return result;
}

// using hashing table

vector<int> findDuplicateHash(vector<int> list)
{
  int n = list.size();
  if ( n < 2) return vector<int>();
  
  int min = list[0];
  int max = list[0];
  for ( int i =  0; i < n; i++) {
    if ( list[i] < min ) min = list[i];
    if ( list[i] > max ) max = list[i];
  }
  vector<int> hashing(max-min+1);
  
  for ( int i = 0; i < hasing.size(); i++) {
    hasing[i] = 0;
  }
  
  for ( int i = 0; i < n; i++) {
    hashing[list[i]]++;
  }
  vector<int> result;
  for ( int i = 0; i < hashing.size(); i++) {
    if ( hashing[i] > 1 ) {
      result.push_back(i + min);
    }
  }
  return result;
}
vector<pair<int, int> >findDuplicateHash(vector<int> list)
{
  int n = list.size();
  if ( n < 2) return vector<pair<int, int>>();
  
  int min = list[0];
  int max = list[0];
  for ( int i =  0; i < n; i++) {
    if ( list[i] < min ) min = list[i];
    if ( list[i] > max ) max = list[i];
  }
  vector<int> hashing(max-min+1);
  
  for ( int i = 0; i < hasing.size(); i++) {
    hasing[i] = 0;
  }
  
  for ( int i = 0; i < n; i++) {
    hashing[list[i]]++;
  }
  vector<int> result;
  for ( int i = 0; i < hashing.size(); i++) {
    if ( hashing[i] > 1 ) {
      pair<int,int> a(i +min, hashing[i]);
      result.push_back(a);
    }
  }
  return result;
}
