#include<iostream>
#include<stdio.h>
#include<stdlib.h>

void Set(struct Matrix *m, int i , int j, int x)
{
  if ( i == j ) m->A[i] = x;
  return;
}
int Get(struct Matrix m, int i, int j ) 
{
  if ( i == j ) return m.A[i-1];
  else return 0;
}
struct Matrix {
  int A[10];
  int n;
}
void Display(struct Matrix m) 
{
  int i, j;
  for ( i = 0; i < m.n; i++) {
    for (j= 0; j < m.n; j++) {
      if ( i == j ) 
        printf("%d ", m.A[i]);
      else
        printf("0 "
     }
     printf("\n");
   }
 }
int main() {
   struct Matrix m;
   m.n = 4;
   Set(&m, 1, 1, 5);
   Set(&m, 2, 2, 8);
   Set(&m, 3, 3, 9);
   Set($m, 4, 4,12);
   Display(m);
   return 0;
 }
 class Matrix {
 private:
   int A[10];
   int n;
 public:
   void Set(int i, int j, int x);
   int  Get(int i, int j);
   void Display();
 };
 
 template<T>
 class Matrix<T> {
 private:
   T * A;
   int n;
 public:
   Matrix(int n);
   ~Matrix() {
     delete []A;
   }
   void Set(int i, int j, T x);
   T Get (int i, int j);
   void Display();
 };
 template<T>
 void Matrix<T>::Matrix(int i)
 {
   n = i;
   A = new T[i];
 }
 template<T>
 void Matrix<T>::Set(int i, int j, T x)
 {
   if ( i > n ) return;
   if ( i == j ) A[i-1] = x;
 }
 template<T>
 T Matrix<T>::Get(int i, int j)
 {
   if ( i == j ) return A[i-1];
   else return 0;
 }
 template<T>
 void Matrix<T>::Display()
 {
   int i , j ;
   for ( i = 0; i < n; i++) {
     for ( j = 0; j < n; j ++) {
       if ( i == j ) {
         cout << A[i-1] << " ";
       } else {
         cout << "0 ";
       }
     }
     cout << endl;
   }
 }
