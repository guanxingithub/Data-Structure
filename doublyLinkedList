#include <stdio.h>
#include <stdlib.h>

struct Node
{
  struct Node *prev;
  int data;
  struct Node *next;
} * first = NULL;

void Display(struct Node *p)
{
  while(p) {
    printf("%d ", p->data);
    p = p->next;
  }
  printf("\n");
}

int length(struct Node *p)
{
  int len = 0;
  p = first;
  while (p ) {
    len++;
    p = p->next;
  }
  return len;
}

void create(int A[], int n)
{
  struct Node *t, *last;
  int i;
  
  first = (struct Node *)malloc(sizeof(struct Node));
  first->data = A[0];
  first->prev = NULL;
  first->next = NULL;
  last = first;
  for ( i = 1; i < n; i++) {
    t= (struct Node*) malloc(sizeof(struct Node));
    t->next = last->next;
    t->data = A[i];
    last->next = t; 
    t->prev = last;
    last = t;
  }
}

void Insert(struct Node *p, int index, int x)
{
  struct Node *last, *t;
  
  if ( index < 0 || index > length(p)) return;
  
  if ( index == 0 ) {
    t =  ( struct Node *) malloc(sizeof(struct Node));
    t->data = x;
    t->prev = NULL;
    t->next = first;
    if ( first ) first->prev = t;
    first = t;
  } else {
    last = first;
    for ( int i = 0; i < index-1 ; i++) {
      last = last->next;
    }
    t = (struct Node *) malloc(sizeof(struct Node));
    t->data = x;
    t->prev = last;
    t->next = last->next;
    if ( last->next ) last->next->prev = t;
    last->next = t;
  }
}
int  Delete(struct Node *p, int index)
{
   if (!first) return -1;
   
   if ( index == 1) { // delete the first 
     p = first; // in order to delete it later
     first = first->next;
     if (first) first->prev = NULL;
     x = p->data;
     free(p);
   } else {
     p = first;
     for (int i = 0; i < index-1; i++) {
       p = p->next;
     }
     p->prev->next = p->next;
     if ( p->next) 
       p->next->prev = p->prev;
     x = p->data;
     free(p);
   }
   return x;
 }
     
 void Reverse(struct Node *p)
 {
   struct Node *t;
   while (p) {
     t = p->next;
     p->next = p->prev;
     p->prev = t;
     if ( p->next == NULL)
       first = p;
   }
 }
       
     
     
