#include <stdio.h>
#include <stdlib.h>

struct Node
{
  int data;
  struct Node *next;
} *Head;

void create(int A[], int n)

{
  int i;
  struct Node *t, *last;
  Head = (struct Node * ) malloc(sizeof(struct Node));
  Head->data = A[0];
  Head->next = Head;
  last = Head;
  for(i = 1; i < n; i++) {
    t = (struct Node *) malloc(sizeof(struct Node));
    t->data = A[i];
    t->next = last->next;
    last->next = t;
    last = t;
  }
}

int main() 
{
  int A[] = {2, 3, 4, 5, 6};
  create(A,5);
  Display(Head);
  return 1;
}

void Display(struct Node*p)

{
  struct Node *p;
  p = head->next;
  
  do {
    printf("%d ", p->data);
    p = p->next;
  } while ( p != head);
}
int Length(struct Node *p)
{
   int len = 0;
   while (p) {
     len++;
     p = p->next;
   }
   return len;
}

void Display(struct Node *p)
{
  while ( p) {
    printf("%d ", p->data);
    p = p->next;
    if ( p == head ) break;
  }
}

void Display(struct Node *p)
{
  static bool first = 0;
  if ( p != head || first == 0 ) {
    first = 1;
    printf("%d ", p->data);
    Display(p->next);
  }
  first = 0;
}

void Insert(int index, int x)
{
  struct Node *t = (struct Node *)malloc(sizeof(struct Node));
  t->data = x;
  t->next = NULL;
  int i = 0;
  struct Node *p;
  if ( index < 0 || index > lenght(Head)) return;
  
  if (index == 0) {
    if ( Head == NULL) {
      Head = t;
      t->next = Head;
    } else {
      p = Head;
      while ( p->next != Head) {
        p = p->next;
     }
     t->next = Head;
     p ->next = t;
     Head = t;
    }
  } else {
    p = Head ;
    while ( i < index -1 ) {
      p = p->next;
      i++;
    }
    t->next = p->next;
    p->next = t;    
  }
}
      
    
  
